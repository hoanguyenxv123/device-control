import 'package:speech_to_text/speech_to_text.dart' as stt;
import 'bluetooth_control.dart';

class VoiceControl {
  final stt.SpeechToText _speech = stt.SpeechToText();
  bool isListening = false;
  final Function(String) onCommandReceived;
  final BluetoothControl _bluetoothControl = BluetoothControl();

  VoiceControl({required this.onCommandReceived});

  void startListening() async {
    bool available = await _speech.initialize(
      onStatus: (status) => print("Tr·∫°ng th√°i: $status"),
      onError: (error) => print("L·ªói: $error"),
    );

    if (available) {
      isListening = true;
      _speech.listen(
        onResult: (result) {
          if (result.finalResult) {
            // Ch·ªâ x·ª≠ l√Ω khi k·∫øt qu·∫£ cu·ªëi c√πng
            String commandText = result.recognizedWords;
            print("üì¢ L·ªánh nh·∫≠n ƒë∆∞·ª£c: $commandText");
            onCommandReceived(commandText);
          }
        },
      );
    }
  }

  void stopListening() {
    _speech.stop();
    isListening = false;
  }

  void processVoiceCommand(
    String command,
    List<int> deviceIds,
    Function(int, bool) sendCommand,
    Function(int, bool) updateUI, // ‚úÖ Th√™m callback c·∫≠p nh·∫≠t UI
  ) async {
    command = command.toLowerCase();
    print("üì¢ X·ª≠ l√Ω l·ªánh gi·ªçng n√≥i: $command");

    Map<int, String> deviceMap = {
      2: "ƒë√®n ph√≤ng kh√°ch", // kh√°ch
      3: "ƒë√®n ph√≤ng b·∫øp", //ng·ªß
      4: "ƒë√®n ph√≤ng h·ªçc", //ng·ªß
      5: "ƒë√®n ph√≤ng t·∫Øm", // b·∫øp
      6: "ƒë√®n ph√≤ng ng·ªß", // office
      7: "tivi", // t·∫Øm
    };

    int? detectedDeviceId;
    for (var entry in deviceMap.entries) {
      if (command.contains(entry.value)) {
        detectedDeviceId = entry.key;
        print("‚úÖ Ph√°t hi·ªán thi·∫øt b·ªã: ${entry.value} (ID: $detectedDeviceId)");
        break;
      }
    }

    if (detectedDeviceId != null) {
      if (_bluetoothControl.controlCharacteristic == null) {
        print("‚ö†Ô∏è ƒê·∫∑c t√≠nh ch∆∞a ƒë∆∞·ª£c x√°c ƒë·ªãnh, t√¨m ki·∫øm...");
        await _bluetoothControl.findControlCharacteristic();
      }

      bool? newState;
      if (command.contains("b·∫≠t")) {
        print("‚úÖ Ph√°t hi·ªán h√†nh ƒë·ªông: B·∫≠t");
        newState = true;
      } else if (command.contains("t·∫Øt")) {
        print("‚úÖ Ph√°t hi·ªán h√†nh ƒë·ªông: T·∫Øt");
        newState = false;
      }

      if (newState != null) {
        await _bluetoothControl.sendCommand(detectedDeviceId, newState);
        sendCommand(detectedDeviceId, newState);
        updateUI(detectedDeviceId, newState); // ‚úÖ C·∫≠p nh·∫≠t UI thi·∫øt b·ªã
      } else {
        print("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c h√†nh ƒë·ªông (b·∫≠t/t·∫Øt)");
      }
    } else {
      print("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c thi·∫øt b·ªã");
    }
  }
}
